-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  fun evalBinOp (op, lhs, rhs) {
    case op of 
      "+"  -> lhs + rhs
    | "-"  -> lhs - rhs
    | "*"  -> lhs * rhs
    | "/"  -> lhs / rhs
    | "%"  -> lhs % rhs
    | "==" -> lhs == rhs
    | "!=" -> lhs != rhs
    | "<"  -> lhs < rhs
    | "<=" -> lhs <= rhs
    | ">"  -> lhs > rhs
    | ">=" -> lhs >= rhs
    | "&&" -> lhs && rhs
    | "!!" -> lhs !! rhs
    esac
  }

  case expr of 
    Var (name)                     -> st (name)
  | Const (value)                  -> value
  | Binop (op, expr_lhs, expr_rhs) -> evalBinOp (op, evalExpr (st, expr_lhs), evalExpr (st, expr_rhs))
  | _                              -> failure ("couldn't match expression")
  esac
}
