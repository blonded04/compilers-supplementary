-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  fun whileImpl (c, cond, expr) {
    case eval (c, cond) of
      [c, 0] -> [c, None]
    | [c, _] -> whileImpl (c, cond, expr)
    esac
  }

  case expr of 
    Assn    (lhs, rhs)           -> case evalList(c, {lhs, rhs}) of
                                      [[s, w], {lvalue, rvalue}] -> case lvalue of
                                                                      Ref (name) ->  [[s <- [name, rvalue], w], rvalue]
                                                                    esac
                                    esac
  | Seq     (expr1, expr2)       -> case evalList(c, {expr1, expr2}) of
                                      [c, {_, tail}] -> [c, tail]
                                    esac
  | Skip                         -> [c, None]
  | Read    (name)               -> case readWorld (w) of
                                      [value, w] -> [[s <- [name, value], w], None]
                                    esac
  | Write   (expr)               -> case eval (c, expr) of
                                      [[s, w], tail] -> [[s, writeWorld(tail, w)], None]
                                    esac
  | If      (cond, expr1, expr2) -> case eval (c, cond) of
                                      [c, 0] -> eval (c, expr2)
                                    | [c, _] -> eval (c, expr1)
                                    esac
  | While   (cond, expr)         -> whileImpl(c, cond, expr)
  | DoWhile (expr, cond)         -> case eval (c, expr) of
                                      [c, _] -> whileImpl(c, cond, expr)
                                    esac
  | Var     (name)               -> [c, s (name)]
  | Ref     (name)               -> [c, Ref (name)]
  | Const   (value)              -> [c, value]
  | Binop   (kind, lhs, rhs)     -> case evalList (c, {lhs, rhs}) of
                                      [c, {lhs, rhs}] -> [c, evalOp(kind, lhs, rhs)]
                                    esac
  | Ignore  (expr)               -> case eval (c, expr) of
                                      [c, _] -> [c, None]
                                    esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
