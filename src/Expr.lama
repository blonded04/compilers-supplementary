-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

(* Assignment *)
fun eval (c@[s, w], expr) {
  fun defineSymbols (st, definitions) {
    case definitions of 
      head : tail -> case head of
                      Fun (fn, argList, expr) -> defineSymbols (st.addFunction (fn, argList, expr), tail)
                    | Var (nameList)          -> defineSymbols (st.addNames (nameList), tail)
                    esac
    | _           -> st
    esac
  }

  fun setArgs (st, args) {
    case args of 
      [argId, argVal] : tail -> setArgs (st.addName (argId, Var (argVal)), tail)
    | _                      -> st
    esac
  }

  case expr of 
    Assn    (lhs, rhs)           -> case evalList(c, {lhs, rhs}) of
                                      [[s, w], {lvalue, rvalue}] -> [[s <- [lvalue, Var (rvalue)], w], rvalue]
                                    esac
  | Seq     (expr1, expr2)       -> case evalList(c, {expr1, expr2}) of
                                      [c, {_, tail}] -> [c, tail]
                                    esac
  | Skip                         -> [c, Void]
  | Read    (name)               -> case readWorld (w) of
                                      [value, w] -> [[s <- [name, Var (value)], w], Void]
                                    esac
  | Write   (expr)               -> case eval (c, expr) of
                                      [[s, w], tail] -> [[s, writeWorld (tail, w)], Void]
                                    esac
  | If      (cond, expr1, expr2) -> case eval (c, cond) of
                                      [c, 0] -> eval (c, expr2)
                                    | [c, _] -> eval (c, expr1)
                                    esac
  | While   (cond, expr)         -> case eval (c, cond) of
                                      [c, 0] -> [c, Void]
                                    | [c, _] -> eval (c, Seq (expr, While (cond, expr)))
                                    esac
  | DoWhile (expr, cond)         -> eval (c, Seq (expr, While (cond, expr)))
  | Var     (name)               -> case s.lookup (name) of
                                      Var (value) -> [c, value]
                                    esac
  | Ref     (name)               -> [c, name]
  | Const   (value)              -> [c, value]
  | Binop   (kind, lhs, rhs)     -> case evalList (c, {lhs, rhs}) of
                                      [c, {lhs, rhs}] -> [c, evalOp (kind, lhs, rhs)]
                                    esac
  | Scope   (defList, expr)      -> case eval ([defineSymbols (s.enterScope, defList), w], expr) of
                                      [[s, w], tail] -> [[s.leaveScope, w], tail]
                                    esac
  | Call    (fn, passList)       -> case s.checkFun (fn) of
                                      _ -> case s.lookup (fn) of
                                             Fun (argList, expr) -> case evalList (c, passList) of
                                                                      [[sOld, w], argValues] -> 
                                                                        case setArgs (sOld.enterFunction, zip (argList, argValues)) of
                                                                          s -> case eval ([s, w], expr) of
                                                                                 [[s, w], tail] -> 
                                                                                   [[sOld.leaveFunction (s.getGlobal), w], tail]
                                                                               esac
                                                                        esac
                                                                    esac 
                                           esac
                                    esac 
  | Ignore  (expr)               -> case eval (c, expr) of
                                      [c, _] -> [c, Void]
                                    esac
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}