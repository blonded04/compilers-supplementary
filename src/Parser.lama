-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun parseBinop (op) {
  [s (op), fun (l, _, r) { Binop (op, l, r) }]
}

-- Primary expression
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                          lident  @ fun (x) {Var (x)} |
                          inbr (s ("("), exp, s (")"))),
      exp   = memo $ eta (expr ({[Left, {parseBinop ("!!")}],
                                 [Left, {parseBinop ("&&")}],
                                 [Nona, map (parseBinop, {"<", "<=", ">", ">=", "!=", "=="})],
                                 [Left, map (parseBinop, {"+", "-"})],
                                 [Left, map (parseBinop, {"/", "*", "%"})]
                                }, primary));

var elseStmt  = memo $ eta syntax (kElse stmts=stmt { stmts }),
    elifStmt  = memo $ eta syntax (kElif condition=exp kThen stmts=stmt { [condition, stmts] } ),
    ifStmt    = memo $ eta syntax (kIf condition=exp kThen stmts=stmt elif_stmts=elifStmt* closing_stmt=elseStmt? kFi { 
      fun collapseElseBranches(elifs, else_result) {
        case elifs of
          elifs_head : elifs_tail -> 
            case elifs_head of 
              [condition, stmt] -> If (condition, stmt, collapseElseBranches (elifs_tail, else_result))
            esac
        | _                     -> else_result
        esac
      }
      
      case closing_stmt of
        Some (else_stmt) -> If (condition, stmts, collapseElseBranches (elif_stmts, else_stmt))
      | None             -> If (condition, stmts, collapseElseBranches (elif_stmts, Skip)) 
      esac
    }),
    whileStmt = memo $ eta syntax (kWhile condition=exp kDo stmts=stmt kOd { While (condition, stmts) }),
    doStmt    = memo $ eta syntax (kDo stmts=stmt kWhile condition=exp kOd { DoWhile (stmts, condition) }),
    forStmt   = memo $ eta syntax (kFor initialization=stmt s[","] condition=exp s[","] step=stmt kDo stmts=stmt kOd { 
      Seq (initialization, While (condition, Seq (stmts, step))) 
    }),
    basicStmt = memo $ eta syntax (kSkip                          { Skip }            |
                                   lhs=lident s[":="] rhs=exp     { Assn (lhs, rhs) } |
                                   kRead s["("] dst=lident s[")"] { Read (dst) }      |
                                   kWrite s["("] src=exp s[")"]   { Write (src) }     |
                                   ifStmt                                             |
                                   whileStmt                                          |
                                   doStmt                                             |
                                   forStmt),
    stmt      = memo $ eta syntax (lhs=basicStmt s[";"] rhs=stmt { Seq (lhs, rhs) } |
                                   basicStmt);
   

-- Public top-level parser
public parse = stmt;
