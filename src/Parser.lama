-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun parseBinop (op) {
  [s (op), fun (l, _, r) { Binop (op, l, r) }]
}

-- Primary expression
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                          lident  @ fun (x) {Var (x)} |
                          inbr (s ("("), exp, s (")"))),
      exp   = memo $ eta (expr ({[Left, {parseBinop ("!!")}],
                                 [Left, {parseBinop ("&&")}],
                                 [Nona, map (parseBinop, {"<", "<=", ">", ">=", "!=", "=="})],
                                 [Left, map (parseBinop, {"+", "-"})],
                                 [Left, map (parseBinop, {"/", "*", "%"})]
                                }, primary));

var basicStmt = memo $ eta syntax (kSkip                           { Skip }            |
                                   lhs=lident s[":="] rhs=exp      { Assn (lhs, rhs) } |
                                   kRead s["("] dst=lident s[")"]  { Read (dst) }      |
                                   kWrite s["("] src=exp s[")"] { Write (src) }),
      stmt    = memo $ eta syntax (lhs=basicStmt s[";"] rhs=stmt { Seq (lhs, rhs) } |
                                   basicStmt);
   

-- Public top-level parser
public parse = stmt;
