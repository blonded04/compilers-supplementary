-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

var elseExp = memo $ eta syntax (kElse expr=exp { exp }),
    elifExp = memo $ eta syntax (kElif cond=exp kThen expr=exp { [cond, expr] }),
    ifExp   = memo $ eta syntax (
                                 loc=pos kIf cond=exp kThen expr=exp elifExps=elifExp* closingExp=elseExp? kFi {
                                   fun (a) {
                                     fun collapseBranches (elifExps, elseResult) {
                                       case elifExps of
                                         elifsHead : elifsTail -> case elifsHead of
                                                                    [cond, expr] -> If (cond (Val), expr (a), collapseBranches(elifsTail, elseResult))
                                                                  esac
                                       | _                     -> elseResult
                                       esac
                                     }

                                     case closingExp of 
                                       Some (elseBr) -> If (cond (Val), expr (a), collapseBranches (elifExps, elseBr (a)))
                                     | None          -> If (cond (Val), expr (a), collapseBranches (elifExps, assertVoid (a, Skip, loc)))
                                     esac
                                }});

var whileExp = memo $ eta syntax (
                                  loc=pos kWhile cond=exp kDo expr=exp kOd {fun(a) {
                                                                              assertVoid(a, While (cond (Val), expr (Void)), loc)
                                 }}),
    doExp    = memo $ eta syntax (
                                  loc=pos kDo expr=exp kWhile cond=exp kOd {fun(a) {
                                                                              assertVoid(a, DoWhile (expr (Void), cond (Val)), loc)
                                 }}),
    forExp   = memo $ eta syntax (loc=pos kFor init=exp s[","] cond=exp s[","] step=exp kDo expr=exp kOd {
                                    fun(a) {
                                      assertVoid(a, Seq (init (Void), While (cond (Val), Seq (expr (Void), step (Void)))), loc)
                                 }});

var primary  = memo $ eta syntax (
                                  -- decimal constant
                                  loc=pos x=decimal                                 {fun (a) {
                                                                                       assertValue (a, Const (stringInt (x)), loc)
                                                                                    }} |

                                   -- identifier
                                  x=lident                                          {fun (a) {
                                                                                       case a of
                                                                                         Ref  -> Ref (x)
                                                                                       | Void -> Ignore (Var (x))
                                                                                       | _    -> Var (x)
                                                                                       esac
                                                                                    }} |
                                  inbr[s ("("), exp, s (")")]                          |
                                  loc=pos kSkip                                     {fun(a) {
                                                                                       assertVoid(a, Skip, loc)
                                                                                    }} |
                                  loc=pos kRead name=inbr[s ("("), lident, s (")")] {fun(a) {
                                                                                       assertVoid(a, Read (name), loc)
                                                                                    }} |
                                  loc=pos kWrite expr=inbr[s ("("), exp, s (")")]   {fun(a) {
                                                                                       assertVoid(a, Write (expr (Val)), loc)
                                                                                    }} |
                                  ifExp                                                |
                                  whileExp                                             |
                                  doExp                                                |
                                  forExp),
    basic    = memo $ eta (expr ({[Right, {[s (":="),
                                            fun (l, loc, r) {
                                              fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                            }]}],
                                  [Left , map (binop, {"!!"})],
                                  [Left , map (binop, {"&&"})],
                                  [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                  [Left , map (binop, {"+", "-"})],
                                  [Left , map (binop, {"*", "/", "%"})]
                                 },
                                 primary)),
    exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
