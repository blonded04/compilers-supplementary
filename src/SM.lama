-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  fun evalStep (env, c, instruction) {
    fun readImpl ([stack, state, w]) {
      case readWorld (w) of 
        [value, newWorld] -> [[value : stack, state, newWorld], KeepLinear]
      esac
    }

    fun writeImpl ([head : tail, state, w]) {
      [[tail, state, writeWorld (head, w)], KeepLinear]
    }

    fun binopImpl ([rhs : lhs : tail, state, w], op) {
      fun evalBinOp (op, lhs, rhs) {
        case op of 
          "+"  -> lhs + rhs
        | "-"  -> lhs - rhs
        | "*"  -> lhs * rhs
        | "/"  -> lhs / rhs
        | "%"  -> lhs % rhs
        | "==" -> lhs == rhs
        | "!=" -> lhs != rhs
        | "<"  -> lhs < rhs
        | "<=" -> lhs <= rhs
        | ">"  -> lhs > rhs
        | ">=" -> lhs >= rhs
        | "&&" -> lhs && rhs
        | "!!" -> lhs !! rhs
        esac
      }

      [[evalBinOp (op, lhs, rhs) : tail, state, w], KeepLinear]
    }

    fun storeImpl ([value : tail, state, w], name) {
      [[tail, state <- [name, value], w], KeepLinear]
    }

    fun pushImpl ([stack, state, w], value) {
      [[value : stack, state, w], KeepLinear]
    }

    fun loadImpl (c @ [stack, state, w], name) {
      pushImpl (c, state (name))
    }

    fun labelImpl (c, label) {
      [c, KeepLinear]
    }

    fun jmpImpl (c, label) {
      case env.fromLabel(label) of
        code -> [c, ShouldJump (code)]
      esac
    }

    fun cjmpImpl (c @ [top : tail, state, w], kind, label) {
      case kind of
        Z  -> 
          case top of
            0 -> jmpImpl ([tail, state, w], label)
          | _ -> [[tail, state, w], KeepLinear]
          esac
      | NZ -> 
          case top of
            0 -> [[tail, state, w], KeepLinear]
          | _ -> jmpImpl ([tail, state, w], label)
          esac
      esac
    }

    case instruction of 
      READ               -> readImpl (c)
    | WRITE              -> writeImpl (c)
    | BINOP (op)         -> binopImpl (c, op)
    | LD    (name)       -> loadImpl (c, name)
    | ST    (name)       -> storeImpl (c, name)
    | CONST (value)      -> pushImpl (c, value)
    | LABEL (_)          -> labelImpl (c)
    | JMP (label)        -> jmpImpl (c, label)
    | CJMP (kind, label) -> cjmpImpl (c, kind, label)
    esac
  }

  case insns of 
    {}                         -> c
  | instruction : instructions -> 
      case evalStep (env, c, instruction) of 
        [c, KeepLinear]        -> eval (env, c, instructions)
      | [c, ShouldJump (code)] -> eval (env, c, code)
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (name)                     -> { LD (name) }
  | Const (value)                  -> { CONST (value) }
  | Binop (op, lhs_expr, rhs_expr) -> compileExpr (lhs_expr) +++ compileExpr (rhs_expr) +++ { BINOP (op) }
  | _                              -> failure ("invalid expr to compile for compileExpr")
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (e, s1, s2) -> 
        case env.genLabel of
          [else_label, env] -> 
            case compileExpr (e) of
              cond -> 
                case compile (lab, env, s1) of
                  [_, env, then_code] ->
                    case compile (lab, env, s2) of
                      [_, env, else_code] -> 
                        [true, env,
                          compileExpr(e) <+
                          CJMP (Z, else_label)
                          <+> then_code
                          <+  JMP (lab)
                          <+  LABEL (else_label)
                          <+> else_code
                        ]
                    esac
                esac
            esac
        esac
    | While (e, s)   ->
        case env.genLabels(2) of
          [cond_label, stmt_label, env] -> 
            case compile (cond_label, env, s) of
              [_, env, loop_code] -> 
                [false, env,
                  singletonBuffer (JMP (cond_label)) 
                  <+  LABEL (stmt_label)
                  <+> loop_code 
                  <+  LABEL (cond_label)
                  <+> compileExpr (e)
                  <+  CJMP (NZ, stmt_label)
                ]
            esac
        esac
    | DoWhile (s, e) ->
        case env.genLabels(2) of
          [cond_label, stmt_label, env] -> 
            case compile (cond_label, env, s) of
              [is_cond_label_used, env, loop_code] -> 
                [false, env,
                  singletonBuffer (LABEL (stmt_label)) 
                  <+> loop_code
                  <+> label (cond_label, is_cond_label_used)
                  <+> compileExpr (e)
                  <+  CJMP (NZ, stmt_label)
                ]
            esac
        esac
    | _ -> failure ("unknown SM token to compile")
    esac
  }  

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
