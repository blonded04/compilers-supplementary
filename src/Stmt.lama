-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c, stmt) {
  fun assnImpl ([s, w], name, expr) {
    [s <- [name, evalExpr (s, expr)], w]
  }

  fun readImpl ([s, w], name) {
    case readWorld (w) of 
      [value, newWorld] -> [s <- [name, value], newWorld]
    esac
  }

  fun writeImpl ([s, w], expr) {
    [s, writeWorld (evalExpr (s, expr), w)]
  }

  case stmt of
    Assn (name, expr)         -> assnImpl (c, name, expr)
  | Seq (lhs_stmt, rhs_stmt)  -> eval (eval (c, lhs_stmt), rhs_stmt)
  | Skip                      -> c
  | Read (name)               -> readImpl (c, name)
  | Write (expr)              -> writeImpl (c, expr)
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
